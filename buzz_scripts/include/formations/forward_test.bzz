include "utils/nav_table.bzz"
include "utils/vec2.bzz"

target_pos = nil
TEST_PATH_PTR =0 
FORWARDING = 1
function forward_test(){
	if(isnil(target_pos)){
		#target_pos = {.x = pose.position.x+10, .y = pose.position.y}
		target_pos = {.x =-2.407, .y = 0.0}
	}
	else{
		var l_tar=math.vec2.sub(target_pos,pose.position)
		l_tar = math.vec2.rotate(l_tar, -pose.orientation.yaw)
		if(math.vec2.length(l_tar) > 0.1){
			goto(l_tar.x*100,l_tar.y*100)
		}
		else{
			goto(0.0,0.0)
			log("Target reached !!")
		}
	}
}

function nav_table_test(){
		var path_tracking_point=GLOBAL_TEST_PATH[TEST_PATH_PTR]
		var home_offset = math.vec2.new(pose.position.x_offset, pose.position.y_offset)
		var NedPos = math.vec2.sub(pose.position,home_offset)
		var m_target = math.vec2.sub(path_tracking_point, NedPos)					
		m_target =  math.vec2.rotate(m_target,-pose.orientation.yaw)
		var Dist_to_target = math.vec2.length(m_target)
		if(FORWARDING){
			if(Dist_to_target > 0.1){
				goto(m_target.x, m_target.y)
			}
			else if(TEST_PATH_PTR < size(GLOBAL_TEST_PATH)){
				TEST_PATH_PTR = TEST_PATH_PTR + 1
				goto(0.0,0.0)
			}
			else{
				log("Heading back")
				FORWARDING = 0
				TEST_PATH_PTR = TEST_PATH_PTR - 1
				goto(0.0,0.0)
			}
		}
		else{
			if(Dist_to_target > 0.1){
				goto(m_target.x, m_target.y)
			}
			else if(TEST_PATH_PTR > 1){
				TEST_PATH_PTR = TEST_PATH_PTR - 1
				goto(0.0,0.0)
			}
			else{
				log("Reached Home !!")
				goto(0.0,0.0)
			}
		}
}