# ROBOT TYPES
SHEEP = 0
DOG = 1

# MACHINE STATE
PREELECTION = 0
ELECTION_ELECTING = 2
ELECTION = 3
PREMOVEMENT = 4
FORMATION = 5
MOVEMENT = 6
FINISHED = 7

# ELECTION STATE
FREE = 1
COMITTED =2

# Message Enum
BACKBONE_CHILD_REQUEST = 1
BACKBONE_CHILD_RESPONCE = 2
CHILD_SET = 3
STATE_MSG = 4
CHILD_WAIT_REQUEST = 5
CHILD_WAIT_RESUME = 6


DOG1 = 1 # RG1
DOG2 = 5 # R5,  R9
TIME_TO_FORGET_DECLINES = 100
TIME_TO_SCAN = 20
NUM_OF_ROBOTS = 5
SAFETY_DISTANCE = 70
BREACKING_DISTANCE = 100
move_tol = 0.1
MA_FILTER_DECAY_CONSTANT = 0.2
PATH_DISCRITIZATION = 0.05
TIME_TO_DECLARE_CHILD_TAG_POSE_OLD = 40


# Global variables 
PARENT_REQUEST_DECLINED = {}
m_free_robots ={}
SELECTED_PARENT = {.0={.state = -1, .time=0}}
PARENT = -1
CHILD = -1
Scan_timeer= 0
path_ptr = 1
moving = 1
child_tag_pos = nil
MA_diff_child = {.x=0.0, .y=0.0}
Cur_child_target ={.x=0.0,.y=0.0}
Cur_path_dis = 0.1
child_pose_time = 0
Recovery = 0
distance_to_travel = 1
pose_at_child_target_sample = {.x=0.0,.y=0.0}


# Internal states
MMode=PREELECTION
Parent_state = PREELECTION
election_state = FREE

LOCAL_WAYPOINT={}

function init_blind(){
    elect_stig = stigmergy.create(101)
    if(id == 5 ){
        ROLE = DOG
    }
    if(ROLE == DOG){
        election_state = COMITTED
        if(id == DOG2){
            MMode=ELECTION
        }
        else if(id == DOG1){
            MMode=ELECTION_ELECTING

            PARENT = DOG2
        }
    }
    else{
        ROLE = SHEEP
    } 
    activate_listerners()

}

function step_blind(){
    log("Mode: ", MMode, " Parent: ", PARENT, " Child: ", CHILD, "size of tags ", size(fiducial_tags))
    # check for fiducial tag pos of the parent and compute the odom drift.
    #  foreach(fiducial_tags, function(k,v){
    #       log("Tag received id", k," POS(",v.x,",",v.y,")")
    #   }  
    #   )
    child_pose_time = child_pose_time + 1
    if( child_pose_time > TIME_TO_DECLARE_CHILD_TAG_POSE_OLD and MMode == MOVEMENT){
        child_tag_pos = nil
    }

    if(size(fiducial_tags) > 0){
        if(fiducial_tags[CHILD] != nil){
            log("CHILD Marker found at (",fiducial_tags[CHILD].x,",",fiducial_tags[CHILD].y,")")
            child_tag_pos = math.vec2.new(fiducial_tags[CHILD].x,fiducial_tags[CHILD].y)
            child_pose_time = 0 
        }
    }
    var parent_check = 1
    var child_check = 1
    var child_pos_vec = nil
    var child_pos = neighbors.get(CHILD)
    var Tag_pose = 0 

    if(CHILD != -1){
        if( not isnil(child_tag_pos)){
            
            child_pos_vec = math.vec2.new(child_tag_pos.x,child_tag_pos.y)
            child_pos_vec = math.vec2.scale(child_pos_vec,100)
            var tag_distance = math.vec2.length(child_pos_vec) 
            if(Recovery == 1){
                if(math.abs(math.vec2.angle(child_pos_vec)) <= math.pi/6){
                    Recovery = 0
                    Tag_pose = 1
                }
            }
            else{
                Tag_pose = 1
            }
            
            if(tag_distance > BREACKING_DISTANCE){
                child_check = 1
                ask_child_to_wait()
            }
            else if(tag_distance < SAFETY_DISTANCE){
                child_check = 0
                log("Child marker pose below safe")
                resume_child()
            }
            if( (not isnil(child_pos)) and  child_pose_time == 0){
                var nei_pos_vec = math.vec2.newp(child_pos.distance, child_pos.azimuth)
                var diff_vec = math.vec2.sub(nei_pos_vec, child_pos_vec)
                MA_diff_child.x = MA_FILTER_DECAY_CONSTANT * MA_diff_child.x + (1.0 - MA_FILTER_DECAY_CONSTANT)*diff_vec.x
                MA_diff_child.y = MA_FILTER_DECAY_CONSTANT * MA_diff_child.y + (1.0 - MA_FILTER_DECAY_CONSTANT)*diff_vec.y
                # for debug print
                # var child_tag_corrected_pos = math.vec2.add(child_pos_vec, MA_diff_child)
            }
        }
        else{
            log("Tag not found for  ", TIME_TO_DECLARE_CHILD_TAG_POSE_OLD, " steps")
            ask_child_to_wait()
            # if(not isnil(child_pos)){
            #     log("child nei not found")
            #     child_pos_vec = math.vec2.newp(child_pos.distance, child_pos.azimuth)
            #     # child_pos_vec = math.vec2.add(child_pos_vec, MA_diff_child)
            #     log("Tag diff estimated nei dist: ",math.vec2.length(child_pos_vec), " actual dist", child_pos.distance)
            #     var nei_distance = math.vec2.length(child_pos_vec)
            #     if(nei_distance > BREACKING_DISTANCE){
            #         child_check = 1
            #         # ask_child_to_wait()
            #     }
            #     # else if(nei_distance < SAFETY_DISTANCE){
            #     #     log("Child pose below safe")
            #     #     child_check = 0
            #     #     # resume_child()
            #     # }
            # }
            # else{
            #     log("CHILD not found in the neigh list !!!")
            #     # child_check = 0
            #     # ask_child_to_wait()
            # }
        }
    }

    # if(PARENT != -1 ){
    #     var parent_pos = neighbors.get(PARENT)
    #     if(not isnil(parent_pos)){
    #         if(parent_pos.distance > BREAK_AWAY_DISTANCE){
    #             log("Parent distance is greater than 2 meter cur dis: ", parent_pos.distance)
    #             parent_check = 0
    #         } 
    #     }
    # }
    log("Parent, child checks: ", parent_check, " , ", child_check, " , moving ", moving)
    if(MMode == ELECTION_ELECTING){
        if(SELECTED_PARENT[0].state != -1){
            log("Selected ", SELECTED_PARENT[0].state)
            SELECTED_PARENT[0].time = SELECTED_PARENT[0].time + 1
            var request = {.type = BACKBONE_CHILD_REQUEST, .receiver=SELECTED_PARENT[0].state, .responce = 0, .need = PARENT, .cus = 0}
            var packed_request = packenummessage(request)
            neighbors.broadcast("1",packed_request)
        }
        else{     
            scan_for_new_parents()
        }
    }
    else if(MMode == ELECTION){
        if(isnil(elect_stig.get(id))){
            elect_stig.put(id, 1)
        }
        num_in_election = {.val=0}
        elect_stig.foreach(function(k,v){
            num_in_election.val = num_in_election.val + 1
        })

        if(num_in_election.val == NUM_OF_ROBOTS){
            MMode = PREMOVEMENT
        }
    }
    else if(MMode == PREMOVEMENT){
        if(CHILD == -1){
            MMode = FORMATION
        }
        else if(Parent_state == MOVEMENT){
            MMode = FORMATION
            pose_at_child_target_sample = math.vec2.new(pose.position.x,pose.position.y)
            if(not isnil(child_pos) ){
                distance_to_travel = child_pos.distance/100
            }
        }
    }
    else if(MMode == FORMATION){
        if(id == DOG1){
            var path_tracking_point=GLOBAL_TEST_PATH[path_ptr]
            var m_target = math.vec2.sub(path_tracking_point, pose.position)					
            m_target =  math.vec2.rotate(m_target,-pose.orientation.yaw)
            var Dist_to_target = math.vec2.length(m_target)
            if(not isnil(child_pos_vec)){
                if(math.vec2.length(child_pos_vec) < BREACKING_DISTANCE){
                    log("ASKING child to resume")
                    resume_child()
                }
            }
            log("[FORMATION] Distance to target ", Dist_to_target)
            if(Dist_to_target > move_tol){
                if(child_check){ # and moving){
                    m_target =  math.vec2.scale(m_target,100)
                    m_target = LCA(m_target)
                    # goto(m_target.x,m_target.y)
                    # m_target =  math.vec2.scale(m_target,1/100)
                    log("[Formation] GOTo ",m_target.x,",", m_target.y)
                    goto_abs(m_target.x, m_target.y, takeoff_heights[id], 0.0)
                }
                else{
                    goto(0.0,0.0)
                }
            }
            else{
                # child_pose_time = 0
                # if( (not isnil(child_pos_vec))){
                #     MMode = MOVEMENT
                #     Cur_child_target = math.vec2.scale(child_pos_vec, 0.01)
                #     Cur_path_dis = math.vec2.length(Cur_child_target)
                #     Cur_child_target = math.vec2.rotate(child_pos_vec,pose.orientation.yaw)
                #     Cur_child_target = math.vec2.add(pose.position, Cur_child_target)
                #     pose_at_child_target_sample = math.vec2.new(pose.position.x, pose.position.y)
                # }
                # else if(CHILD == -1){
                    MMode = MOVEMENT
                # }
                goto(0.0,0.0)
            }
        }
        else{
            var vec_diff_of_sampled_pose = math.vec2.sub(pose.position,pose_at_child_target_sample)
            if(math.vec2.length(vec_diff_of_sampled_pose) < distance_to_travel){
                if( (not isnil(child_pos_vec)) and child_check){
                    var m_target = math.vec2.new(child_pos_vec.x, child_pos_vec.y)
                    m_target = avoid_obs_using_potential(m_target)
                    log("[Formation] GOTo ",m_target.x,",", m_target.y)
                    goto_abs(m_target.x, m_target.y, takeoff_heights[id], 0.0)
                }
                else if( (not isnil(child_pos)) and child_check){
                    # Approach the child to acquire tag 
                    var m_target = math.vec2.newp(child_pos.distance, child_pos.azimuth)
                    m_target = avoid_obs_using_potential(m_target)
                    log("[Formation] GOTo ",m_target.x,",", m_target.y)
                    goto_abs(m_target.x, m_target.y, takeoff_heights[id], 0.0)
                }
                else{
                    goto(0.0,0.0)
                }
            }
            else{
                # proceed to next state.
                MMode = MOVEMENT
            }
        }
    }
    else if(MMode == MOVEMENT){
        if(parent_check and child_check){
            #log("Path pointer: ", path_ptr)
            if(moving == 1 or Recovery == 1){
                var path_tracking_point= {}
                if(id == DOG1){
                    path_tracking_point=GLOBAL_TEST_PATH[path_ptr]
                    log("Forwarding (via movebase) to (", path_tracking_point.x,",",path_tracking_point.y,")")
                    var last_wp = 0
                    if(not (goto_point(path_tracking_point, last_wp))){
                        # WP reached
                        if(path_ptr < size(GLOBAL_TEST_PATH)){
                            path_ptr = path_ptr + 1
                            # moving = 1
                        }
                        else{
                            log("TARGET REACHED")
                            goto(0.0,0.0)
                        }
                    } 
                }
                else{
                    if(Tag_pose == 1){
                        var m_goto_target = math.vec2.new(child_pos_vec.x, child_pos_vec.y)
                        m_goto_target =  avoid_obs_using_potential(m_goto_target)
                        goto_abs(m_goto_target.x, m_goto_target.y, takeoff_heights[id], 0.0)
                        # var pose_diff_vec = math.vec2.sub(pose.position, pose_at_child_target_sample)
                        # if(math.vec2.length(pose_diff_vec) >= PATH_DISCRITIZATION){
                        #     pose_at_child_target_sample = math.vec2.new(pose.position.x, pose.position.y)
                        #     Cur_child_target = math.vec2.scale(child_pos_vec, 0.01)
                        #     Cur_path_dis = math.vec2.length(Cur_child_target)
                        #     Cur_child_target = math.vec2.rotate(child_pos_vec,pose.orientation.yaw)
                        #     Cur_child_target = math.vec2.add(pose.position, Cur_child_target)
                        # }

                        # var m_target = math.vec2.sub(Cur_child_target, pose.position)					
                        # m_target =  math.vec2.rotate(m_target,-pose.orientation.yaw)
                        # # var Dist_to_target = math.vec2.length(m_target)
                        # m_target =  math.vec2.scale(m_target,100)
                        # goto_abs(m_target.x, m_target.y, takeoff_heights[id], 0.0)

                    }
                    else{
                        Recovery = 1
                        var rotate_vec = math.vec2.newp(0.1,3.14)
                        goto_abs(rotate_vec.x, rotate_vec.y, takeoff_heights[id], 0.0)
                    }
                    # if(LOCAL_WAYPOINT[path_ptr] != nil){
                    #     path_tracking_point=LOCAL_WAYPOINT[path_ptr]
                    #     var m_target = math.vec2.sub(path_tracking_point, pose.position)					
                    #     m_target =  math.vec2.rotate(m_target,-pose.orientation.yaw)
                    #     var Dist_to_target = math.vec2.length(m_target)
                    #     log("Path pointer: ", path_ptr, ", dist", Dist_to_target, " , going to (",m_target.x,",",m_target.y,")")
                    #     if(Dist_to_target > move_tol){
                    #         log("Forwarding (via goto) to (", path_tracking_point.x,",",path_tracking_point.y,")")
                            
                    #         # m_target =  math.vec2.scale(m_target,1/100)
                    #         # goto(m_target.x,m_target.y)
                    #         m_target =  math.vec2.scale(m_target,100)
                    #         log("GOTo ",m_target.x,",", m_target.y)
                    #         goto_abs(m_target.x, m_target.y, takeoff_heights[id], 0.0)
                    #     }
                    #     else{
                    #         if(PARENT != -1){
                    #             moving = 0
                    #         }
                    #         else if(PARENT == -1){
                    #                 moving = 1
                    #                 path_ptr = path_ptr + 1
                    #         }
                    #         else{
                    #             if(path_ptr < size(LOCAL_WAYPOINT)){
                    #                 path_ptr = path_ptr + 1
                    #                 moving = 1
                    #             }
                    #         }
                    #     }
                    # }
                    # else{
                    #     log("Sampling the waypoint sample without DOG's msg")
                        
                    # }
                }				
            }
            else{
                goto(0.0,0.0)
            }
        }
        else{
            goto(0.0,0.0)
        }

    }

    broadcast_current_state()

    update_timeto_forget()

}


function ask_child_to_wait(){
    var request = {.type = CHILD_WAIT_REQUEST, .receiver=CHILD, .responce = 0, .need = 0, .cus = 0}
    var packed_request = packenummessage(request)
    neighbors.broadcast("1",packed_request)
}

function resume_child(){
    var request = {.type = CHILD_WAIT_RESUME, .receiver=CHILD, .responce = 0, .need = 0, .cus = 0}
    var packed_request = packenummessage(request)
    neighbors.broadcast("1",packed_request)
}


function update_timeto_forget(){
    # forget a selected parent after the selection expiry time
    if(SELECTED_PARENT[0].time > 20){
        # if(id == 2) log("[2] removing selected parent becaue the time is ", SELECTED_PARENT[0].time, " robot ", SELECTED_PARENT[0].state)
        SELECTED_PARENT[0].time = 0
        PARENT_REQUEST_DECLINED[SELECTED_PARENT[0].state]={.rid = SELECTED_PARENT[0].state, .time=TIME_TO_FORGET_DECLINES}
        SELECTED_PARENT[0].state = -1
    }

}

function broadcast_current_state(){ 
  var request = {.type = STATE_MSG, .receiver=election_state, .responce = 0, .need = MMode, .cus = 0}
  var packed_request = packenummessage(request)
  neighbors.broadcast("2",packed_request)
}

function scan_for_new_parents(){
  # Are there more parents
  #log("[",id,"] size of free robots",size(m_free_robots), " size of declines ", size(PARENT_REQUEST_DECLINED) )
  # log(" selected parent : ", SELECTED_PARENT[0].state)
  if( (size(m_free_robots) - size(PARENT_REQUEST_DECLINED)) > 0 ){
    var pot_parents = find_potential_parents()
    if(pot_parents.rid != -1){
      # log("[",id,"] asking robot for parent: ",pot_parents.rid )
      if(SELECTED_PARENT[0].state == -1){
        # single parent selection
        SELECTED_PARENT[0].state = pot_parents.rid
        SELECTED_PARENT[0].time = 0
        # log(" selected parent set : ", SELECTED_PARENT[0].state)
      }

      # if(id == 2)log("[",id,"] Child request sent to : ",pot_parents.rid, " SELECTED_PARENT ", SELECTED_PARENT[0].time, " rid ",SELECTED_PARENT[0].state)
      # send a parent request
      if(target ==10 ) cur_target = 0
      var request = {.type = BACKBONE_CHILD_REQUEST, .receiver=pot_parents.rid, .responce = 0, .need = PARENT, .cus = 0}
      var packed_request = packenummessage(request)
      neighbors.broadcast("1",packed_request)
    }
    else{
      log("[ERROR][",id, "] NO more FREE ROBOTS to ask to serve as parents")
    }
  }
  else{
        if(Scan_timeer < TIME_TO_SCAN){
            Scan_timeer = Scan_timeer + 1
        }
        else{
            log("[",id, "] NO more FREE ROBOTS to ask to serve as parents, terminating chain")
            MMode = ELECTION
            var request = {.type = CHILD_SET, .receiver=DOG2, .responce = 0, .need = 0, .cus = 0}
            var packed_request = packenummessage(request)
            neighbors.broadcast("1",packed_request)
        }
  }

}

function find_potential_parents(){
    var tab = {.x = 0, .y=0, .rid = -1}
    neighbors.foreach(function(rid, value) {
        # log("[",id,"] looking for parent id ",rid," in set ",m_free_robots[rid]," already considered ",check_parent_already_considered(rid))
        if(m_free_robots[rid] != NIL and check_parent_already_considered(rid) == 0){
            var lowest_vec = math.vec2.new(tab.x,tab.y)
            var lowest_dist = math.vec2.length(lowest_vec) 
            # log("[",id,"] scanning  for parent: my dist: ", (value.distance*0.01), " lowest_dist: ", lowest_dist )
            if(tab.rid == -1 or (value.distance*0.01) < lowest_dist){
                var nei_data_vec = math.vec2.newp(value.distance, value.azimuth)
                # convert to meters
                nei_data_vec = math.vec2.scale(nei_data_vec,0.01)
                tab.x = nei_data_vec.x
                tab.y = nei_data_vec.y
                tab.rid = rid
            }
        }
    })
    return tab
}

function check_parent_already_considered(rid){
  var temp_count = 0
  var ret_val = { .a=0 }
  foreach(PARENT_REQUEST_DECLINED, function(key, value) {
      if(value.rid == rid){ ret_val.a=1}
  })
  return ret_val.a
}

#
#pack request responce message into 1 number
#
function packenummessage(send_table){
    var send_value = 0.0
    send_value=10000*send_table.receiver+1000*send_table.type+100*send_table.responce+send_table.need
    # log("[",id,"] ",send_table.receiver," , ", send_table.type, " , ", send_table.responce, " , ", send_table.need, " , ", send_table.cus, "val ", send_value )
    return send_value
}

#
#unpack request responce message into a table
#
function unpackenummessage(value){
    var out_table = {.receiver = 0, .type = 0, .responce =0, .need = 0, .cus = 0}
    # receiver
    out_table.receiver=(value-value%10000)/10000
    value=value-out_table.receiver*10000
    # type
    out_table.type=(value-value%1000)/1000
    value=value-out_table.type*1000
    # responce
    out_table.responce=(value-value%100)/100
    value=value-out_table.responce*100
    # need
    out_table.need=value

    # log("[",id,"] ",out_table.receiver," , ", out_table.type, " , ", out_table.responce, " , ", out_table.need, "val ", value )

    return out_table
}

function table_print(out_table) {
    foreach(out_table, function(key, value) {
        log(key, " -> ", value)
    })
}

function activate_listerners(){

    # Request and responce closure
    neighbors.listen("1",
        function(vid, value, rid) {
            var responce_table = {}
            responce_table =  unpackenummessage(value)
            if(responce_table.receiver == id){
                if(responce_table.type == BACKBONE_CHILD_REQUEST){
                    if( (ROLE == SHEEP and election_state == FREE) or CHILD == rid){
                        var request = {.type = BACKBONE_CHILD_RESPONCE, .receiver=rid, .responce = 1, .need = 0, .cus =0}
                        var packed_request = packenummessage(request)
                        neighbors.broadcast("1",packed_request)
                        PARENT = responce_table.need
                        CHILD = rid
                        MMode = ELECTION_ELECTING
                        election_state = COMITTED
                        # log("[",id,"] Backbone child request accept sent to", rid)
                    }
                    else{
                        var request = {.type = BACKBONE_CHILD_RESPONCE, .receiver=rid, .responce = 0, .need = 0, .cus =0}
                        var packed_request = packenummessage(request)
                        neighbors.broadcast("1", packed_request)
                        # log("[",id,"] Backbone child request rejected and sent to", rid)
                    }
                }
                else if(responce_table.type == BACKBONE_CHILD_RESPONCE){
                    if(responce_table.responce == 1){
                        PARENT = rid
                        MMode = ELECTION
                    }
                    else{
                        PARENT_REQUEST_DECLINED[rid]={.rid = rid, .time = TIME_TO_FORGET_DECLINES} 
                        SELECTED_PARENT[0].state = -1
                        SELECTED_PARENT[0].time = 0
                    }
                }
                else if(responce_table.type == CHILD_SET){
                    CHILD = rid
                }
                else if(responce_table.type == CHILD_WAIT_REQUEST){
                        log(" Got a STOP request")
                        moving = 0
                    
                }
                else if(responce_table.type == CHILD_WAIT_RESUME){
                        log(" Got a RESUME request")
                        moving = 1

                }
            }
        }
    )

    neighbors.listen("2",
        function(vid, value, rid) {
            var status_table = {}
            status_table =  unpackenummessage(value)
            if(status_table.receiver == FREE){
                if(isnil(m_free_robots[rid])){
                    m_free_robots[rid]={.rid=rid}
                }
            }
            else if(status_table.receiver == COMITTED){
                if(m_free_robots[rid] != NIL){
                    m_free_robots[rid] = NIL
                }
            }
            if(CHILD == rid){
                Parent_state = status_table.need
            }
        }
    )


}


function find_robot_is_in_set(rid, r_set){
    var sret_value = {.a = -1}
    if(r_set != nil){
        foreach(r_set,
            function(key,value) {
                if(value.rid == rid){
                sret_value.a = value.rid
                return sret_value.a
                }
            }
        )
    }
    return sret_value.a
}
