##########
# Includes
#########
include "update.bzz"
include "utils/vec2.bzz"
include "utils/takeoff_heights.bzz"
include "utils/nav_table.bzz"
# include "formations/circling_experiment.bzz"
include "formations/blind_follow.bzz"
include "formations/forward_test.bzz"

#####
# Vehicule type:
# 0 -> outdoor flying vehicle
# 1 -> indoor flying vehicle
# 2 -> outdoor wheeled vehicle
# 3 -> indoor wheeled vehicle
V_TYPE = 2


#####
# Simulation or real robot
# 
SIMULATION = 0


#####
# Exploration sub-states:
# 0 -> exploring the environment to maximize coverage.
# 1 -> yeilding to one of the high priority robot.
# 2 -> returning back home to fetch minion robots.
# 3 -> 
EXPLORE_EXPLORING = 0
EXPLORE_YEILDING = 1
EXPLORE_RETUNING = 2

# ROBOT TYPES BASED ON SPECILIZATION
# SHEEP = 0
# DOG = 1

# Explorer robot (key-> ID, value -> Priority, lower higher priority)
EXPLORER_IDs = {.0=1, .3=3, .50=12, .51=2, .52=3, .53=4, .54=5, .55=6, .56=7, .57=8, .58=9, .59=10, .60=11}
INIT_MOTIONS ={.0={.x=1.5, .y=0.0},.3={.x=1.5, .y=0.0}, .50={.x=2.5, .y=1.5}, .51={.x=-2.0, .y = -2.0}, .52={.x=-1.5, .y = 2.0},
			   .53={.x=-2.5, .y = -2.5}, .54={.x=0.5, .y = -2.5}, .55={.x=-1.0, .y = 2.0},
			   .56={.x=2.0, .y = -2.5}, .57={.x=1.0, .y = -2.0}, .58={.x=1.0, .y = 2.5},
			   .59={.x=-2.0, .y = -2.0}, .60={.x=-1.5, .y = 1.5}}
EXPLORE_STATE = 0


# Global variables
BVMSTATE = "LAUNCH"
statef = turned_off
init_motion = 0 # Varible to determine if initialization is done.
radiation_source_located = 0
homing_complete = 0
CUR_PATH ={}
OLD_PATH ={}
CUR_WP_IDX =0
planner_time = 0
global_planner_called=0
local_planner_called = 0
hierarchial_path_to_source = {}
hierarchial_navigational_tube = {}
Move_base_tracking_goal = 0
Goal_reached_declare_timer = 0
flight = {.rc_cmd=0}
cool_down_timer = 0 
current_guide_id_decision = 1
time_step = 0
assgned_guide_role = 0
waypoint_set_time = 0
planner_stuck_trigger = 0
Stuck_detection_goto1={}
Stuck_detection_goto2={}
stuck_recover_timer = 0
# Bug algorithm global variables
old_pose={}
used_exploration_quota=0
Home_reached=0
inbound_travel = 0
nei_radiation = 0
nei_radiation_id = 0
close_to_radiation = 0
broadcast_inbound = 0
Target_found = 0
Bugs_found_target = {}

# Data logging special vairables
close_to_radiation = 0
path_distance_to_target = 0
experiment_done = 0


# Constants
GOTODIST_TOL = 0.3
GOTO_MAXVEL = 3 #m/s 
EXPLORATION_YEILD = 250 #cms
PLANNER_TIME_OUT = 200 # 20 sec
STUCK_TIME_OUT = 300 # 30 sec 
YAW_OFFSET=3.14
TARGET_DETECTION_RANGE = 500 #cms Detect a target within this range
TARGET_ID = 49 # 49 is the target.
SAFETY_DISTANCE = 35
HARMON_A0 = 0.0
HARMON_K = 1.0/50.0
COOL_DOWN_TIME = 250 # explorer cool down for 5 sec before any action.
MIN_WORKERS_COUNT = 1
REQUIRED_GUIDES = 2
STUCK_RECOVERY_TIME=5
MAX_EXPLORATION_QUOTA_WORKER=100 # Distance the worker robots can explore in m.
EVOLVED_EXPLORATION_QUOTA_WORKER=MAX_EXPLORATION_QUOTA_WORKER
map_path="/home/vivek/Vivek/Projects/Hierarchical_Swarm/KheperaIV"
map_name="BUZZ_SCRIPT_NAME"

# FILE_PATH = "/home/nvidia/gbplanner_ws/src/control/rosbuzz/buzz_scripts/log/"
# BEHAVIOR_FILE_NAME = string.concat(FILE_PATH, string.tostring(id), "-Behavior_bzz_log.csv")
# csv_file =""
TIME_TO_DECLARE_GOAL_REACHED = 10
# Executed once at init time.
function init() {	
	# Open csv file to record data
    # csv_file = io.fopen(BEHAVIOR_FILE_NAME, "w")
	# start the swarm command listener
	nei_cmd_listen()

	# run the hierarchical movement init
	# hierarchical_init()

	# init blid following.
	# init_blind()

	# Stigmergy to advertise availabilty to transport. 
	guide_available_stig = stigmergy.create(102)
	# Stigmergy to advertise bugs requiring transport.
	bug_require_transport_stig = stigmergy.create(201)
	# Assigment stigmergy. 
	assignment_guide_stig = stigmergy.create(103) 
	assignment_guide_stig.onconflict(function (k, local, remote) {
		if(remote.data <= local.data) return remote 
		else return local
	})
	# Stigmery for sharing path.
	path_stig = stigmergy.create(104)

  	# Starting state: TURNEDOFF to wait for user input.
	BVMSTATE = "TURNEDOFF"
	AUTO_LAUNCH_STATE = "EXPLORE"
	# AUTO_LAUNCH_STATE = "OBSTACLE_TEST"

	# Determine your role.
	if(not isnil(EXPLORER_IDs[id])) {
		log("I am a Dog")
		ROLE = DOG
		# setup_velocity_callbacks_from_table(EXPLORER_IDs)
	}
	log("my id ",id)
	if(id == TARGET_ID){
		log("Set BVM state to target")
		BVMSTATE = "TURNEDOFF"
		AUTO_LAUNCH_STATE = "TURNEDOFF"
	}
	
	# if(id < TARGET_ID){
	# 	ROLE = SHEEP
	# 	init_blind()
	# 	BVMSTATE = "BUG_ALGORITHM"
	# 	old_pose = pose.position
	# }
	log("my id ",id, "BVM STATE ", BVMSTATE)
	# Initialize stuck detection 
	Stuck_detection_goto1 = math.vec2.new(0.0,0.0)
	Stuck_detection_goto2 = math.vec2.new(0.0,0.0)
	# set moving exploration quota
	EVOLVED_EXPLORATION_QUOTA_WORKER=MAX_EXPLORATION_QUOTA_WORKER
}

# Executed at each time step.
function step() {
	# log("[",id,"] POS (",pose.position.x,",",pose.position.y,",",pose.position.z,") yaw: ", pose.orientation.yaw, " WP ",CUR_WP_IDX)
	# log("BVM state: ", BVMSTATE, " EXPLORE_STATE ", EXPLORE_STATE)
        # listen to Remote Controller
	rc_cmd_listen()

	# Look for radiation source
	detect_target()


	#
	# Top level State machine for Radiation cleanup experiment.
	# States: 
	# 1. TURNEDOFF -> the robot does nothing, it ideals
	# 2. STOP -> A state to transition to turnedoff.
	# 3. LAUNCH -> Entry state that performs initlization for the robot to transition to the subsequent states.
	# 4. EXPLORE -> Explores the environment until a target is detected. 
	# 5. RETURN_TO_BASE -> TARGET found return to base to dump the map and pickup followers.
	# 6. HIRACHIAL_BEHAVIORS -> Uses hirarchial control to perfrom a mission. 
	#
	if(BVMSTATE=="TURNEDOFF"){
		statef=turnedoff
	} 
	else if(BVMSTATE=="STOP"){	# ends on turnedoff
		statef=stop
	}
	else if(BVMSTATE=="LAUNCH"){ # ends on AUTO_LAUNCH_STATE
		statef=launch
	}
	else if(BVMSTATE=="EXPLORE"){
		statef=explore
	}
	else if(BVMSTATE=="RETURN_TO_BASE"){
		statef=return_to_base
	}
	else if(BVMSTATE == "EXPLORE_COOL_DOWN"){
		statef=explore_cool_down
	}
	else if(BVMSTATE == "WAITING_FOR_MIN_EXPLORER"){
		statef=wait_for_explorer
	}
	else if(BVMSTATE=="HIRACHIAL_BEHAVIORS"){
			statef=hierarchical_step		
	}
	else if(BVMSTATE == "BLIND_FOLLOW"){
		statef=step_blind
	}
	else if(BVMSTATE == "BUG_ALGORITHM"){
		statef=bug_algorithm
	}
	else if(BVMSTATE == "BUG_HOLD_AT_TARGET"){
		statef=bug_hold_at_target
	}

	# else if(BVMSTATE == "FORWARD_TEST"){
	# 	statef=forward_test
	# }
	# else if(BVMSTATE == "NAV_TEST"){
	# 	statef=nav_table_test
	# }
	# else if(BVMSTATE == "OBSTACLE_TEST"){
	# 	statef=obs_test
	# }
	# else if(BVMSTATE=="CIRCLING_EXPERIMENT"){
	#     statef=circling_experiment		
	# }
	# debug.
	print(BVMSTATE," , ",MMode)

	statef()

	time_step = time_step + 1
}
 
# Executed once when the robot (or the simulator) is reset.
function reset() {
}
 
# Executed once at the end of experiment.
function destroy() {
	# io.fclose(csv_file)
}

# Exploration cool down state.
function explore_cool_down(){
	# Keep broadcasting msg if you or nei found the radiation source.
	if(global_planner_called == 1){
		neighbors.broadcast("cmd", 911)
	}
	BVMSTATE = "EXPLORE_COOL_DOWN"
	if(cool_down_timer < COOL_DOWN_TIME){
		cool_down_timer = cool_down_timer + 1
	}
	else{
		BVMSTATE = "WAITING_FOR_MIN_EXPLORER"
		cool_down_timer = 0
	}
}

# Min explorers waiting state. 
function wait_for_explorer(){
	# log("[",id,"] waiting with ", neighbors.count(), " robots ", " guides ", guide_available_stig.size(), " assignments ", assignment_guide_stig.size(), " cur assignment ", current_guide_id_decision)
	# Keep broadcasting msg if you or nei found the radiation source.
	if(global_planner_called == 1){
		neighbors.broadcast("cmd", 911)
	}
	if(isnil(guide_available_stig.get(id))){
		guide_available_stig.put(id, guide_available_stig.size())
	}
	if(neighbors.count() >= MIN_WORKERS_COUNT + REQUIRED_GUIDES-1 and guide_available_stig.size() >= REQUIRED_GUIDES and assignment_guide_stig.size() <= REQUIRED_GUIDES*2){
		
		# Are you the lead who found the target?
		if(radiation_source_located == 1 and current_guide_id_decision == 1){
			var cur_id = assignment_guide_stig.get(current_guide_id_decision)
			var decesion_pending = assignment_guide_stig.get(current_guide_id_decision+2)
			if(isnil(decesion_pending)){
				if(isnil(cur_id)){
					assignment_guide_stig.put(current_guide_id_decision, id)
				}
				else if(id < cur_id){ 
					assignment_guide_stig.put(current_guide_id_decision, id)
				}
			}
		}
		else if(current_guide_id_decision > 1 and assgned_guide_role == 0){
			var cur_id = assignment_guide_stig.get(current_guide_id_decision)
			var decesion_pending = assignment_guide_stig.get(current_guide_id_decision+2)
			if(isnil(decesion_pending)){
				if(isnil(cur_id)){
					assignment_guide_stig.put(current_guide_id_decision, id)
				}
				else if(id < cur_id){ 
					assignment_guide_stig.put(current_guide_id_decision, id)
				}
			}
		}
	

		cool_down_timer = cool_down_timer + 1
		if(cool_down_timer > COOL_DOWN_TIME){
			if(current_guide_id_decision == 1){
				DOG1 = assignment_guide_stig.get(current_guide_id_decision)
				if(not isnil(DOG1)){
					if(id == DOG1){
						assgned_guide_role = 1
						assignment_guide_stig.put(current_guide_id_decision+2, 1)
					}
					current_guide_id_decision = current_guide_id_decision + 1
					cool_down_timer = 0
					log("[",id,"] DOG1 ", DOG1, " DOG2 is ", DOG2)
				}
			}
			else if(current_guide_id_decision == 2){
				DOG2 = assignment_guide_stig.get(current_guide_id_decision)
				if(not isnil(DOG2)){
					if(id == DOG2){
						assgned_guide_role = 1
						assignment_guide_stig.put(current_guide_id_decision+2, 1)
					}
					current_guide_id_decision = current_guide_id_decision + 1
					cool_down_timer = 0
					log("[",id,"] DOG1 ", DOG1, " DOG2 is ", DOG2)
					if(id == DOG1 or id == DOG2){
						init_blind()
						BVMSTATE = "BLIND_FOLLOW"
						GLOBAL_TEST_PATH = hierarchial_path_to_source
					}
					else{
						BVMSTATE = "TURNEDOFF"
					}
				}
			}
		}

	}
	else if(assignment_guide_stig.size() > REQUIRED_GUIDES*2){
		BVMSTATE = "TURNEDOFF"
		return
	}
}

function bug_algorithm(){
	detect_target()
	compute_exploration_quota_used()
	if(broadcast_inbound == 1){
		neighbors.broadcast("cmd",55)
	}
	if(MAX_EXPLORATION_QUOTA_WORKER > 0){
		if(used_exploration_quota > EVOLVED_EXPLORATION_QUOTA_WORKER){
			# log("[",id,"] Doing inbound ")
			inbound_travel = 1
			close_to_radiation = 0
			nei_radiation = 0
		}
	}

	if(inbound_travel == 1){
		var dist_tower = math.vec2.length(pose.position)
		if(dist_tower <  1.5){
			Home_reached = 1
			init_blind()
			BVMSTATE = "BLIND_FOLLOW"
			bug_require_transport_stig.put(id,1)
			set_wheels(0.0,0.0)
			return
		}
	}

	if(close_to_radiation == 0 and nei_radiation == 0){
		var c_vel = bug_step(time_step, inbound_travel)
		set_wheels(c_vel[0].x,c_vel[0].y)
	}
	else if(nei_radiation == 1){
		Target_found=1
		# obs_in_range()
		var nei_pos = neighbors.get(nei_radiation_id)
		if(not isnil(nei_pos)){
			if(nei_pos.distance > 100){
				var nei_vec = math.vec2.newp(nei_pos.distance, nei_pos.azimuth)
				nei_vec = avoid_obs_using_potential(nei_vec)
				goto(nei_vec.x*100,nei_vec.y*100)
			}
			else{
				BVMSTATE = "BUG_HOLD_AT_TARGET"
				set_wheels(0.0,0.0)
			}
		}
		else{
			set_wheels(0.0,0.0)
		}
		nei_radiation = 0
	}
	else if(close_to_radiation == 1){
		neighbors.broadcast("cmd",911)
		Target_found=1
		# obs_in_range()
		var target_data = neighbors.get(TARGET_ID)
		if(target_data.distance > 150){
			var nei_vec = math.vec2.newp(target_data.distance, target_data.azimuth)
			nei_vec = avoid_obs_using_potential(nei_vec)
			goto(nei_vec.x*100,nei_vec.y*100)
		}
		else{
			BVMSTATE = "BUG_HOLD_AT_TARGET"
			set_wheels(0.0,0.0)
		}
	}
	else{
		set_wheels(0.0,0.0)
	}
	old_pose = pose.position

}

function bug_hold_at_target(){
	neighbors.broadcast("cmd",911)
	set_wheels(0.0,0.0)
}

# Implementation of Core States 
# Core state function to launch the robot: takeoff and wait for others, or stop (land)
function launch() {
	BVMSTATE = "LAUNCH"
	# neighbors.broadcast("cmd", 22)
	if(V_TYPE > 1) {
		log("[",id,"] Auto state: ", AUTO_LAUNCH_STATE)
		BVMSTATE=AUTO_LAUNCH_STATE
	} else {
		log("Altitude: ", pose.position.z)
		uav_takeoff(takeoff_heights[id])
	}
	
}

# Core state function to stop and land.
function stop() {
  BVMSTATE = "STOP"
  if(pose.position.z <= 0.5) {
		BVMSTATE = "TURNEDOFF"
		goto(0.0,0.0)
	} else{
		uav_land()
		neighbors.broadcast("cmd", 21)
	}
}

# Core state function when on the ground
function turnedoff() {
    BVMSTATE = "TURNEDOFF"
}

# Core state to explore and map the environment. 
function explore(){
	BVMSTATE ="EXPLORE"
	if(ROLE == DOG){
		# Keep broadcasting msg if you or nei found the radiation source.
		if(global_planner_called == 1){
			neighbors.broadcast("cmd", 911)
		}
		# Coordinate the exploration with other robots. 
		if(EXPLORE_STATE == EXPLORE_EXPLORING){

			# if(high_priority_robot_in_field()){
			# 	EXPLORE_STATE = EXPLORE_YEILDING
			# 	goto(0,0)
			# 	return
			# }
			
			# Perform the initialization motion to determine the exploration direction. 
			if(init_motion == 0){
				# forward motion of 2 meters 
				var vec_to_target = INIT_MOTIONS[id]
				var last_wp = 0				
				if(goto_point_naive(vec_to_target, last_wp) == 0){
					# init motion complete
					goto_abs(0.0,0.0, takeoff_heights[id], 0.0)
					var clear_all_exsisting paths = get_local_planner_path()
					init_motion = 1
					log("[",id,"] INIT MOTION DONE")
				}
				log("Doing init")
			}
			else{
				# Perform local planning to maximize the environmental information and coverage.
				if( isnil(CUR_PATH)){
					CUR_PATH = get_local_planner_path()
					if(local_planner_called == 0 ){
						call_local_planner()
						local_planner_called = 1
						planner_time = time_step
						planner_stuck_trigger = 0
					}	
					else if(time_step - planner_time > PLANNER_TIME_OUT){
						planner_stuck_trigger = 1
						var idx = size(OLD_PATH) - 3
						var f_idx = 0
						CUR_PATH = {}

						while(idx >= 0){
							CUR_PATH[f_idx] = {.x=OLD_PATH[idx].x, .y=OLD_PATH[idx].y}
							idx = idx - 1
							f_idx = f_idx + 1 
						}
						# log("[",id,"] cur path", size(CUR_PATH)," old ", size(OLD_PATH))

						planner_time = time_step
						OLD_PATH = {}
						CUR_WP_IDX = 0
					}		
					waypoint_set_time = time_step
				}
				else{
					# Following a path, complete the path.
					if(size(CUR_PATH) <= 0){
						CUR_PATH = nil
						CUR_WP_IDX=0
						goto_abs(0.0,0.0, takeoff_heights[id], 0.0)
					}
					else{
						var cur_wp = math.vec2.new(CUR_PATH[CUR_WP_IDX].x, CUR_PATH[CUR_WP_IDX].y)
						var last_wp = 0
						if(CUR_WP_IDX == size(CUR_PATH)-2){
							last_wp = 1
						}
						if(not (goto_point_naive(cur_wp, last_wp))){
							# WP reached
							if(CUR_WP_IDX < size(CUR_PATH)-2){
								CUR_WP_IDX = CUR_WP_IDX + 1
								waypoint_set_time = time_step
							}
							else{
								if( planner_stuck_trigger == 0 ){
									OLD_PATH = copy_table_vec2(CUR_PATH)
								}
								CUR_PATH = nil
								var clearing_old_paths = get_local_planner_path()
								CUR_WP_IDX=0
								local_planner_called = 0
								goto_abs(0.0,0.0, takeoff_heights[id], 0.0)
							}
						}
					}
				}
			}
		}
		else if(EXPLORE_STATE == EXPLORE_YEILDING){
			if( not high_priority_robot_in_field()){
				EXPLORE_STATE = EXPLORE_EXPLORING
			}
			log("Explorer Yeilding to a nearby robot.")
		}
		else if(EXPLORE_STATE == EXPLORE_RETUNING){
			
			if(isnil(CUR_PATH)){
				CUR_PATH = get_global_planner_path()
				if(size(CUR_PATH) > 0 and radiation_source_located){ 
					reverse_table(CUR_PATH)
					save_map(map_path,map_name)
					if(SIMULATION){
						# Stop planner
						stop_exploration_planner()
					}
					CUR_WP_IDX=0
					goto_abs(0.0,0.0, takeoff_heights[id], 0.0)
				}
				else if(size(CUR_PATH) > 0){
					save_map(map_path,map_name)
					if(SIMULATION){
						# Stop planner
						stop_exploration_planner()
					}
				}
				waypoint_set_time = time_step
			}
			else if(size(CUR_PATH) <= 0){
				CUR_PATH = get_global_planner_path()
				if(size(CUR_PATH) > 0 and radiation_source_located){
					reverse_table(CUR_PATH)
					save_map(map_path,map_name)  
					if(SIMULATION){
						# Stop planner
						stop_exploration_planner()
					}
					CUR_WP_IDX=0
				}
				else if(size(CUR_PATH) > 0){
					save_map(map_path,map_name)
					if(SIMULATION){
						# Stop planner
						stop_exploration_planner()
					}
				}
				# return to base or Home
				# Tell exploration planner to home using the global graph.
				if( (not global_planner_called) and (not local_planner_called)){
					# Someother robot found the source, simply home.
					log("Calling global planner")
					call_global_planner() 
					global_planner_called = 1
				}
				else{
					if(local_planner_called){
						if(isnil(CUR_PATH)){
							var tmp_local_path = get_local_planner_path()
							if(size(tmp_local_path) > 0){
								local_planner_called = 0
							}
						}
						else{
							CUR_PATH = nil
							var clearing_old_paths = get_local_planner_path()
							CUR_WP_IDX=0
							local_planner_called = 0 
						}
					}
					# planner is working please wait.
					goto(0.0,0.0)
				}
				waypoint_set_time = time_step
			}
			else{
				var cur_wp = math.vec2.new(CUR_PATH[CUR_WP_IDX].x, CUR_PATH[CUR_WP_IDX].y)
				var last_wp = 0
				if(not (goto_point_naive(cur_wp, last_wp))){
					# WP reached
					if(CUR_WP_IDX < size(CUR_PATH)-1){
						CUR_WP_IDX = CUR_WP_IDX + 1
						waypoint_set_time = time_step
					}
					else if(CUR_WP_IDX >= size(CUR_PATH)-1){
						# Home reached, TODO: trigger hierarchial behaviror.
						log("HOME REACHED")
						BVMSTATE = "EXPLORE_COOL_DOWN"
						goto(0.0,0.0)
					}
				}
			}
		}
	}
	else{
		# just ideal, if you are not capable of exploring.

	}
}


# function to handle rc commands.
function rc_cmd_listen() {
	if(BVMSTATE=="TURNEDOFF") {
		if(flight.rc_cmd==22) {	#TAKEOFF\LAUNCH
			flight.rc_cmd=0
			BVMSTATE = "LAUNCH"
			neighbors.broadcast("cmd", 22)
		} 
	} else if(BVMSTATE != "STOP") {
		if(flight.rc_cmd==21) {
			flight.rc_cmd=0
			BVMSTATE = "STOP"
			neighbors.broadcast("cmd", 21)
		} 
	} 

	if(flight.rc_cmd == 911 and ROLE == DOG){
		flight.rc_cmd = 0
		if(radiation_source_located == 0){
			radiation_source_located = 1
			EXPLORE_STATE = EXPLORE_RETUNING
 			BVMSTATE ="EXPLORE"
			CUR_PATH = nil
 			CUR_WP_IDX=0
		    Move_base_tracking_goal = 0
			log("RADIATION DETECTED!!!")
		}
	}
	else if(flight.rc_cmd == 888){
		BVMSTATE = "HIRACHIAL_BEHAVIORS"
		neighbors.broadcast("cmd",888)
	} 
	if(flight.rc_cmd == 811){
		# restart planning
		CUR_PATH = nil
 		CUR_WP_IDX=0
		Move_base_tracking_goal = 0
	}
}

# listens to neighbors broadcasting commands
function nei_cmd_listen() {
    neighbors.listen("cmd",
		function(vid, value, rid) {
			# print("Got (", vid, ",", value, ") #", rid, "(", BVMSTATE, ")")
			if(BVMSTATE=="TURNEDOFF") {
				if(value==22) {
					BVMSTATE = "LAUNCH"
				}
			} 
			else if(BVMSTATE != "STOP") {
				if(value==21 and BVMSTATE != "STOP") {
					BVMSTATE = "STOP"
					neighbors.broadcast("cmd", 21)
				}
			} 

			if(BVMSTATE == "EXPLORE"){
				if(value == 999 and BVMSTATE != "RETURN_TO_BASE"){
					BVMSTATE = "RETURN_TO_BASE"
				}
				if(value == 911 and EXPLORE_STATE != EXPLORE_RETUNING and rid > TARGET_ID){
                                        EXPLORE_STATE = EXPLORE_RETUNING
                                        BVMSTATE ="EXPLORE"
                                        CUR_PATH = nil
										CUR_WP_IDX = 0
										Move_base_tracking_goal = 0
                                        log(" Another Guide FOUND RADIATION !!!")
                }
			}
			# Bug algorithm neighbour trigger.
			if(value == 911){
				if(rid < TARGET_ID){ # It is another bug, so get to it if it is close enough.
					var nei_pos = neighbors.get(rid)
					
					Bugs_found_target[rid]=1
					if(nei_pos.distance < 200){
						nei_radiation = 1	
						nei_radiation_id = rid
						# log(" NEI FOUND RADIATION !!!")
					}
				}
				else if(rid > TARGET_ID){
					inbound_travel = 1
					broadcast_inbound = 1
				}
			}
			else if(value == 55 and id < TARGET_ID){
				inbound_travel = 1
				broadcast_inbound = 1
			}

    })
}

# TODO have to implement map save hook 
function save_map(map_path, map_name){
	log("TODO: save map called: Implement save map")
}
# simple goto wrapper 

function goto(x_g,y_g){
	goto_abs(x_g, y_g, takeoff_heights[id], 0.0)
}
# goto wrapper for argos based scripts
# function goto(x, y) {
# 	var height = takeoff_heights[id]
# 	var g_vec = math.vec2.new(x,y)
# 	var norm_fact= 0.4
# 	var norm_goto = math.vec2.scale(g_vec, norm_fact)
# 	if(math.vec2.length(norm_goto) < 0.737463127){
# 	   norm_goto = math.vec2.scale(norm_goto, 0)
# 	}
# 	# Convert cm to m
# 	norm_goto.x = 1.0/100.0 * norm_goto.x
# 	norm_goto.y = 1.0/100.0 * norm_goto.y

# 	log("GOTo ",norm_goto.x,",", norm_goto.y)
# 	goto_abs(norm_goto.x, norm_goto.y, height, 0.0)
# }

# Function to use ROS move base node (ROS navigational stack) along with ROSBuzz 
# This function takes goal in the /map frame. Using any other frame will create unexpexted behavior. 
# This function assumes get_local_trajectory_goal returns the origin when the goal is reached.
function goto_point(goal, last_wp){
	var goal_status = get_goal_status()
	#log("GOAL STATUS ", goal_status)
	if(goal_status){
		Goal_reached_declare_timer = Goal_reached_declare_timer + 1
		goto_abs(0.0, 0.0, takeoff_heights[id], 0.0)				
	}
	else{
		Goal_reached_declare_timer = 0
		goto_abs(0.0, 0.0, takeoff_heights[id], 0.0)				
	}
	if(Goal_reached_declare_timer > TIME_TO_DECLARE_GOAL_REACHED and Move_base_tracking_goal){
		goto_abs(0.0, 0.0, takeoff_heights[id], 0.0)				
		Move_base_tracking_goal = 0
		return 0
	}
	if(not Move_base_tracking_goal){
		Move_base_tracking_goal = 1
		set_navigation_goal(goal.x, goal.y)
		goto_abs(0.0, 0.0, takeoff_heights[id], 0.0)				
	}
	var local_goal_vec = get_local_trajectory_goal() # goal from the movebase planner.
  #log("Goal received ", local_goal_vec.x," , ", local_goal_vec.y)
		
  if(math.vec2.length(local_goal_vec) > 0){
	  var home_offset = math.vec2.new(pose.position.x_offset, pose.position.y_offset)
	  var NedPos = math.vec2.sub(pose.position,home_offset)
	  var local_vec = math.vec2.sub(local_goal_vec,NedPos)
	  local_vec_len = math.vec2.length(local_vec)
	  local_vec = math.vec2.rotate(local_vec, -1*pose.orientation.yaw)
    #log("local vec len ", local_vec_len, " vec ", local_goal_vec.x, ", ",local_goal_vec.y, " angle to goal ", math.abs( math.vec2.angle(local_vec)))

		if(math.abs( math.vec2.angle(local_vec)) > 2.0 ){ # Goal is directly behind the robot, rotate.
			goto_abs(-1.0, 0.0, takeoff_heights[id], 0.0)				
		}
		else{
	 		# scale to desired vel
			#local_vec = math.vec2.scale(local_vec,1)
			# Limit speed
			# local_vec = math.vec2.newp(math.vec2.length(local_vec)*10,math.vec2.angle(local_vec)) # Original for exploration
			local_vec = math.vec2.newp(math.vec2.length(local_vec)*5,math.vec2.angle(local_vec)) # altered for tag following
			goto_abs(local_vec.x, local_vec.y, takeoff_heights[id], 0.0)
		}
  }

	return 1	
}

# Function to use ROS move base node (ROS navigational stack) along with ROSBuzz and obtain a goto vec
# This function takes goal in the /map frame. Using any other frame will create unexpexted behavior. 
function movebase_point(goal){
	var goal_status = get_goal_status()
	var movebase_goto = math.vec2.new(0.0,0.0)
	#log("GOAL STATUS ", goal_status)
	if(goal_status){
		Goal_reached_declare_timer = Goal_reached_declare_timer + 1				
	}
	else{
		Goal_reached_declare_timer = 0
	}
	if(Goal_reached_declare_timer > TIME_TO_DECLARE_GOAL_REACHED and Move_base_tracking_goal){				
		Move_base_tracking_goal = 0
		return movebase_goto
	}
	if(not Move_base_tracking_goal){
		Move_base_tracking_goal = 1
		set_navigation_goal(goal.x, goal.y)				
	}
	var local_goal_vec = get_local_trajectory_goal() # goal from the movebase planner.
  #log("Goal received ", local_goal_vec.x," , ", local_goal_vec.y)
		
  if(math.vec2.length(local_goal_vec) > 0){
	  var home_offset = math.vec2.new(pose.position.x_offset, pose.position.y_offset)
	  var NedPos = math.vec2.sub(pose.position,home_offset)
	  var local_vec = math.vec2.sub(local_goal_vec,NedPos)
	  local_vec_len = math.vec2.length(local_vec)
	  local_vec = math.vec2.rotate(local_vec, -1*pose.orientation.yaw)
      #log("local vec len ", local_vec_len, " vec ", local_goal_vec.x, ", ",local_goal_vec.y, " angle to goal ", math.abs( math.vec2.angle(local_vec)))

		if(math.abs( math.vec2.angle(local_vec)) > 2.0 ){ # Goal is directly behind the robot, rotate.
			movebase_goto.x = -1.0
			movebase_goto.y = 0.0
		}
		else{
	 		# scale to desired vel
			#local_vec = math.vec2.scale(local_vec,1)
			# Limit speed
			#local_vec = math.vec2.newp(math.vec2.length(local_vec)*10,math.vec2.angle(local_vec))
			movebase_goto.x = local_vec.x
			movebase_goto.y = local_vec.y
		}
  }

	return movebase_goto	
}

function goto_point_naive(vec_to_target, last_wp){
	# var home_offset = math.vec2.new(pose.position.x_offset, pose.position.y_offset)
	# var NedPos = math.vec2.sub(pose.position,home_offset)
	var local_vec = math.vec2.sub(vec_to_target,pose.position)
	local_vec = math.vec2.rotate(local_vec, -pose.orientation.yaw)
	var last_wp_tol = 0.0
	if(last_wp){
		last_wp_tol = 0.2
	}
	if(math.vec2.length(local_vec) > GOTODIST_TOL+last_wp_tol){
		# Limit speed
		local_vec = math.vec2.newp(math.min(GOTO_MAXVEL,math.vec2.length(local_vec)),math.vec2.angle(local_vec))
		# scale to desired vel
		# local_vec = math.vec2.scale(local_vec,100)
		# if(time_step - waypoint_set_time < STUCK_TIME_OUT ){
			# local_vec = avoid_nei_using_potential(local_vec)
			# local_vec = avoid_obs_using_potential(local_vec)
		# }
		if(time_step - waypoint_set_time > STUCK_TIME_OUT){
			if(BVMSTATE != BLIND_FOLLOW){
				waypoint_set_time = time_step
			}
			log("[WARN] Waypoint is taking very long to reach, stuck detected")
			if(EXPLORE_STATE == EXPLORE_EXPLORING and BVMSTATE == "EXPLORE"){
				log("Explorer stuck while exploring !")
				CUR_PATH = nil
				local_planner_called = 0
				return 1
			}
			else if(EXPLORE_STATE == EXPLORE_RETUNING and BVMSTATE == "EXPLORE"){
				log("Explorer stuck while returning !")
				if(CUR_WP_IDX < size(CUR_PATH)-1){
					CUR_WP_IDX = CUR_WP_IDX + 1
					waypoint_set_time = time_step
					return 1
				}
				else if(CUR_WP_IDX >= size(CUR_PATH)-1){
					# Home reached, TODO: trigger hierarchial behaviror.
					log("[WARN] Premature declaration of HOME REACHED")
					BVMSTATE = "EXPLORE_COOL_DOWN"
					goto(0.0,0.0)
					return 1
				}
			}
			else if(BVMSTATE == "BLIND_FOLLOW" and ROLE != DOG){
				log("[WARN] Follower stuck performing recovery routine")
				if(stuck_recover_timer < STUCK_RECOVERY_TIME){
					var recovery_goto = math.vec2.newp(1000,0)
					local_vec = avoid_obs_using_potential(recovery_goto)
					stuck_recover_timer = stuck_recover_timer + 1
				}
				else{
					stuck_recover_timer = 0
					waypoint_set_time = time_step
				}
			}
			else if(BVMSTATE == "BLIND_FOLLOW" and ROLE == DOG){
				if(id == DOG1){
					log("[WARN] DOG1 stuck performing going to next point")
					if(child_check == 1){
						log("[WARN] DOG1 stuck going to next waypoint")
						if(path_ptr <  size(GLOBAL_TEST_PATH) - 1){
							path_ptr = path_ptr + 1
						}
						else{
							experiment_done = 1
                            log("STUCK AT LAST WAYPOINT: DECLARING PREMATURE TARGET REACHED !!!")
                            goto(0.0,0.0)
						}
						waypoint_set_time = time_step

						return 1
					}
					else{
						waypoint_set_time = time_step
					}
				}

				# else{
				# 	log("[WARN] DOG2 stuck performing recovery routine")
				# 	if(stuck_recover_timer < STUCK_RECOVERY_TIME){
				# 		var recovery_goto = math.vec2.newp(1000,0)
				# 		local_vec = avoid_obs_using_potential(recovery_goto)
				# 		stuck_recover_timer = stuck_recover_timer + 1
				# 	}
				# 	else{
				# 		stuck_recover_timer = 0
				# 		waypoint_set_time = time_step
				# 	}
					
				# }				
			}
			
		}
		else{
			stuck_recover_timer = 0
		}
		# if(math.vec2.length(local_vec) > 0){
		# 	if(Stuck_detection_goto1.x == local_vec.x or Stuck_detection_goto2.x == local_vec.x){
		# 		if(Stuck_detection_goto1.y == local_vec.y or Stuck_detection_goto2.y == local_vec.y){
		# 			log("[Warn] Stuck detected, reset planner")
		# 			if(EXPLORE_STATE == EXPLORE_EXPLORING){
		# 				log("Explorer stuck while exploring !")
		# 				CUR_PATH = nil
		# 				local_planner_called = 0
		# 				return 1
		# 			}
		# 			else if(EXPLORE_STATE == EXPLORE_RETUNING){
		# 				log("Explorer stuck while returning !")
		# 				if(CUR_WP_IDX < size(CUR_PATH)-1){
		# 					CUR_WP_IDX = CUR_WP_IDX + 1
		# 					waypoint_set_time = time_step
		# 					return 1
		# 				}
		# 				else if(CUR_WP_IDX >= size(CUR_PATH)-1){
		# 					# Home reached, TODO: trigger hierarchial behaviror.
		# 					log("[WARN] Premature declaration of HOME REACHED")
		# 					BVMSTATE = "EXPLORE_COOL_DOWN"
		# 					goto(0.0,0.0)
		# 					return 1
		# 				}
		# 			}
		# 		}
		# 	}
		# }
		# Stuck_detection_goto2 = math.vec2.new(Stuck_detection_goto1.x, Stuck_detection_goto1.y)
		# Stuck_detection_goto1 = math.vec2.new(local_vec.x, local_vec.y)
		# local_vec = RVO(local_vec)
		#local_vec = math.vec2.rotate(local_vec,YAW_OFFSET)
		log("goto ",local_vec.x,",",local_vec.y, "Pos (",pose.position.x,",",pose.position.y,") target (",vec_to_target.x,",",vec_to_target.y,")")
		goto_abs(local_vec.x, local_vec.y, takeoff_heights[id], 0.0)
		
		return 1
	}
	else{
		goto_abs(0.0,0.0, takeoff_heights[id], 0.0)
		
		return 0
	}
}

function high_priority_robot_in_field(){
	var found_robot ={.0=0}
	neighbors.foreach(
	  	function(rid, data) {
			if(EXPLORER_IDs[rid]){
	  			# log("Explorer in range ",rid, "at distance ", data.distance)
	  			if(EXPLORER_IDs[rid] < EXPLORER_IDs[id] and data.distance < EXPLORATION_YEILD){
	    			found_robot[0] = 1
	  			}
	  		}
		}
	)
	return found_robot[0]
}

function reverse_table(table_c){
	var ret_table ={}
	var idx = size(table_c) - 1
	var f_idx = 0
	while(idx >= 0){
		# log("vec x ", table_c[idx].x, " y ", table_c[idx].y)
		hierarchial_path_to_source[f_idx] = math.vec2.new(table_c[idx].x, table_c[idx].y)
		# accumulate the path distance
		if(f_idx != 0){
			var diff_vec = math.vec2.sub(hierarchial_path_to_source[f_idx-1], hierarchial_path_to_source[f_idx])
			path_distance_to_target = path_distance_to_target + math.vec2.length(diff_vec)
		}
		idx = idx - 1
		f_idx = f_idx + 1 
	}
	# log("size ", size(hierarchial_path_to_source))
}

function obs_test(){
		var tmp_tar = math.vec2.new(-5,0)
		# tmp_tar = math.vec2.sub(tmp_tar, pose.position)
		# tmp_tar = math.vec2.rotate(tmp_tar, pose.orientation.yaw)
		# var m_vec_to_go = math.vec2.scale(tmp_tar,100)
		# var m_vec_to_go = math.vec2.newp(1000,0)
		# m_vec_to_go = avoid_obs_using_potential(m_vec_to_go)
		if(time_step == 1000){
			waypoint_set_time = time_step
		}
		var wp_Resilt = goto_point_naive(tmp_tar,0)
		# goto(m_vec_to_go.x, m_vec_to_go.y)
}


function avoid_obs_using_potential(m_goto_target){
	if(ROLE == SHEEP){
		return avoid_obs_using_potential_footbot(m_goto_target)
	}
	else if(ROLE == DOG){
		return avoid_obs_using_potential_kh4(m_goto_target)
	}
}

function avoid_obs_using_potential_footbot(m_goto_target){
  var Accum = {.cnt=0,.x=0.0,.y=0.0}
  var reaction_threshold = 42
  var desired_safety_distance = 10
  var obs_present =0

  var i = 0 
  while(i < size(proximity)){
	var l_prox = proximity[i].value * 100
	
	if(l_prox > 40){
		l_prox = 0
	} 
	else{
		obs_present = 1
	} 
	var potential = harmonMagnitude(l_prox, desired_safety_distance, HARMON_A0, HARMON_K)

	var pot_vec = math.vec2.newp(potential, proximity[i].angle)
	if(potential < 0 ){
		Accum.x = Accum.x + pot_vec.x
		Accum.y = Accum.y + pot_vec.y
		Accum.cnt = Accum.cnt + 1
	}
	i = i + 1
  }

  if(Accum.cnt > 0){
    Accum.x = Accum.x/Accum.cnt
    Accum.y = Accum.y/Accum.cnt
  }
  else{
	  obstacle_timer = 0
  }

  var normalized_target_vec = math.vec2.new(m_goto_target.x,m_goto_target.y)
  var vec_mag = math.vec2.length(normalized_target_vec)
  normalized_target_vec = math.vec2.scale(normalized_target_vec, 1/math.vec2.length(normalized_target_vec))
  var target_weight = 0.6
  var return_vec =  math.vec2.new((target_weight*normalized_target_vec.x)+ ((1-target_weight)*Accum.x),(target_weight*normalized_target_vec.y)+((1-target_weight)*Accum.y))
  return_vec = math.vec2.newp(vec_mag, math.vec2.angle(return_vec))
  if(obs_present == 1){
	  return_vec = math.vec2.scale(return_vec,70)
  }
  return return_vec
}

function avoid_obs_using_potential_kh4(m_goto_target){
  var Accum = {.cnt=0,.x=0.0,.y=0.0}
  var reaction_threshold = 42
  var desired_safety_distance = 20
  var i = 0 
  while(i < size(proximity)){
	var potential = harmonMagnitude( (1.01 - proximity[i].value) *19, desired_safety_distance, HARMON_A0, HARMON_K)
	var pot_vec = math.vec2.newp(potential, proximity[i].angle)
	if(proximity[i].value > 0){
		Accum.x = Accum.x + pot_vec.x
		Accum.y = Accum.y + pot_vec.y
		Accum.cnt = Accum.cnt + 1
	}
	i = i + 1
  }

  if(Accum.cnt > 0){
    Accum.x = Accum.x/Accum.cnt
    Accum.y = Accum.y/Accum.cnt
  }
  var normalized_target_vec = math.vec2.new(m_goto_target.x,m_goto_target.y)
  var vec_mag = math.vec2.length(normalized_target_vec)
  normalized_target_vec = math.vec2.scale(normalized_target_vec, 1/math.vec2.length(normalized_target_vec))
  var target_weight = 0.2
  var return_vec = math.vec2.new((target_weight*normalized_target_vec.x)+ (Accum.x),(target_weight*normalized_target_vec.y)+(Accum.y))
  return_vec = math.vec2.newp(vec_mag, math.vec2.angle(return_vec))
  # return_vec = math.vec2.scale(return_vec,10)
  return return_vec
}

function ultrasound_obs_potential(){
  var Accum = {.cnt=0,.x=0.0,.y=0.0}
  var reaction_threshold = 42
  var desired_safety_distance = 45
  var i = 0 
  while(i < size(ultrasound)){
	var potential = harmonMagnitude( (ultrasound[i].value*200)+25, desired_safety_distance, HARMON_A0, HARMON_K)
	if(ultrasound[i].value == 0) potential = 0
	var pot_vec = math.vec2.newp(potential, ultrasound[i].angle)
	log("us ", i ," -> ", ultrasound[i].value, " pot ", potential, " dis ", (ultrasound[i].value*200)+25)
	if((ultrasound[i].value*200)+25 < reaction_threshold and potential < 0){
		Accum.x = Accum.x + pot_vec.x
		Accum.y = Accum.y + pot_vec.y
		Accum.cnt = Accum.cnt + 1
	}
	i = i + 1
  }
}

function detect_target(){
	var target_data = neighbors.get(TARGET_ID)
	if(not isnil(target_data)){
		if(target_data.distance < TARGET_DETECTION_RANGE){
			flight.rc_cmd = 911
			close_to_radiation = 1
		} 
		else{
			close_to_radiation = 0
		}
	}
	else{
		close_to_radiation = 0
	}
}

function avoid_nei_using_potential(m_target){
  var Accum = {.cnt=0,.x=0.0,.y=0.0}
  neighbors.foreach(
    function(rid, data){
      var potential = harmonMagnitude(data.distance, SAFETY_DISTANCE+10, HARMON_A0, HARMON_K)
      if(data.distance < SAFETY_DISTANCE+50 and potential < 0){
        var my_vec = math.vec2.newp(data.distance, data.azimuth)
        # debug.rays.add(0,100,0, my_vec.x/100, my_vec.y/100, 0.0)
        var pot_vec = math.vec2.newp(potential, data.azimuth)
        Accum.x = Accum.x + pot_vec.x
        Accum.y = Accum.y + pot_vec.y
        Accum.cnt= Accum.cnt +1
      }
    }
  )
  if(Accum.cnt > 0){
    Accum.x = Accum.x/Accum.cnt
    Accum.y = Accum.y/Accum.cnt
  }
  var normalized_target_vec = math.vec2.new(m_target.x,m_target.y)
  var vec_mag = math.vec2.length(normalized_target_vec)
  normalized_target_vec = math.vec2.scale(normalized_target_vec, 1/math.vec2.length(normalized_target_vec))
  
  # if(math.vec2.length(Accum) > 0) Accum = math.vec2.scale(Accum, 1/math.vec2.length(Accum))
  var target_weight = 3.5
  var return_vec = math.vec2.new((target_weight*normalized_target_vec.x)+ (Accum.x),(target_weight*normalized_target_vec.y)+(Accum.y))
  return_vec = math.vec2.newp(vec_mag, math.vec2.angle(return_vec))
#   return_vec = math.vec2.scale(return_vec,500)

  return return_vec
}


function avoid_nei_using_potential_normal_prox(m_target){
  var Accum = {.cnt=0,.x=0.0,.y=0.0}
  neighbors.foreach(
    function(rid, data){
      var potential = harmonMagnitude(data.distance, SAFETY_DISTANCE+10, HARMON_A0, HARMON_K)
      if(data.distance < SAFETY_DISTANCE+50 and potential < 0){
        var my_vec = math.vec2.newp(data.distance, data.azimuth)
        # debug.rays.add(0,100,0, my_vec.x/100, my_vec.y/100, 0.0)
        var pot_vec = math.vec2.newp(potential, data.azimuth)
        Accum.x = Accum.x + pot_vec.x
        Accum.y = Accum.y + pot_vec.y
        Accum.cnt= Accum.cnt +1
      }
    }
  )
  if(Accum.cnt > 0){
    Accum.x = Accum.x/Accum.cnt
    Accum.y = Accum.y/Accum.cnt
  }
  var normalized_target_vec = math.vec2.new(m_target.x,m_target.y)
  var vec_mag = math.vec2.length(normalized_target_vec)
  normalized_target_vec = math.vec2.scale(normalized_target_vec, 1/math.vec2.length(normalized_target_vec))
  
  # if(math.vec2.length(Accum) > 0) Accum = math.vec2.scale(Accum, 1/math.vec2.length(Accum))
  var target_weight = 3.5
  var return_vec = math.vec2.new((target_weight*normalized_target_vec.x)+ (Accum.x),(target_weight*normalized_target_vec.y)+(Accum.y))
  return_vec = math.vec2.newp(vec_mag, math.vec2.angle(return_vec))
  # return_vec = math.vec2.scale(return_vec,500)

  return return_vec
}

function harmonMagnitude(dist, desiredDist, a0, k) {
  return a0 + ((dist - desiredDist)/math.abs(dist - desiredDist)) * 1.0/2.0 * k * (dist - desiredDist)^2
}

function copy_table_vec2(t){
	var t2 = {}
	foreach(t, function(key, value) {
		t2[key] = math.vec2.new(value.x, value.y)
		})
	return t2
}

function compute_exploration_quota_used(){
	var c_dist_vec = math.vec2.sub(pose.position, old_pose)
	used_exploration_quota = used_exploration_quota + math.vec2.length(c_dist_vec)
}