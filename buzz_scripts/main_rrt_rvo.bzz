include "update.bzz"
# don't use a stigmergy id=11 with this header, for barrier 
# it requires an 'action' function to be defined here.
include "act/states.bzz"
include "utils/table.bzz"
include "plan/rrtstar.bzz"
#include "taskallocate/graphformGPS.bzz"
#include "taskallocate/bidding.bzz"
include "vstigenv.bzz"
#include "timesync.bzz"
include "utils/takeoff_heights.bzz"
include "connectivity/chain_formation.bzz"

#AUTO_LAUNCH_STATE = "DEPLOY" NOW SET IN LAUNCH FILE!!
LAND_AFTER_BARRIER_EXPIRE = 1 # if set to be 1 , the robots will land after barrier expire; if set to be 0, the robots will carry on to AUTO_LAUNCH_STATE.

GOTODIST_TOL = 0.6  # m.

#####
# Vehicule type:
# 0 -> outdoor flying vehicle
# 1 -> indoor flying vehicle
# 2 -> outdoor wheeled vehicle
# 3 -> indoor wheeled vehicle
if(id==0)	# No network ID=0, it's the groundstation/charging station.
	V_TYPE = 2
else
	V_TYPE = 0

# goal_list = {
# 	.0={.x = 45.5088103899, .y = -73.1540826153, .z = 2.5}
# }

waypoints = {}
current_wp = 0


# Executed once at init time.
function init() {

	# Select waypoints
	if(id == 1) {
		waypoints = {
		.0 = math.vec2.new(10.0, 10.0)
		}
	}
	if(id == 2) {
		waypoints = {
		.0 = math.vec2.new(2.0, 2.0)
		}
	}
	# if(id == 3) {
	# 	waypoints = {
	# 	.0 = math.vec2.new(2.0, 10.0)
	# 	}
	# }
	# if(id == 2) {
	# 	waypoints = {
	# 	.0 = math.vec2.new(15.0, 10.0)
	# 	}
	# }
	# if(id == 3) {
	# 	waypoints = {
	# 	.0 = math.vec2.new(-15.0, 5.0)
	# 	}
	# }
	# if(id == 1) {
	# 	waypoints = {
	# 	.0 = math.vec2.new(45.5105, -73.6093),
	# 	.1 = math.vec2.new(45.5104, -73.6094)
	# 	}
	# }
	# if(id == 2) {
	# 	waypoints = {
	# 	.0 = math.vec2.new(45.5104, -73.6094),
	# 	.1 = math.vec2.new(45.5105, -73.6093)
	# 	}
	# }

  	init_stig()
	init_swarm()
	#init_bidding()
	
	TARGET_ALTITUDE = takeoff_heights[id]
	
	# start the swarm command listener
	nei_cmd_listen()

    # Starting state: TURNEDOFF to wait for user input.
	BVMSTATE = "TURNEDOFF"
}

# Executed at each time step.
function step() {

	# print("Current state: ", BVMSTATE)

	# listen to Remote Controller
	rc_cmd_listen()

	# update the vstig (status/net/batt/...)
  	uav_updatestig()

	#
	# State machine
	#
	if(BVMSTATE=="TURNEDOFF"){
		if(AUTO_LAUNCH_STATE=="CHAIN_FORMATION") intialize_chain_formation()
		statef=turnedoff
	} else if(BVMSTATE=="CUSFUN")
		statef=cusfun
	else if(BVMSTATE == "YOLO_DEMO")
    	statef=yolo_demo
	else if(BVMSTATE=="STOP")	# ends on turnedoff
		statef=stop
	else if(BVMSTATE=="LAUNCH") # ends on AUTO_LAUNCH_STATE
		if(LAND_AFTER_BARRIER_EXPIRE == 1)
			statef=launch
		else
			statef=launch_switch
	else if(BVMSTATE=="GOHOME") # ends on AUTO_LAUNCH_STATE
		statef=goinghome
	else if(BVMSTATE=="CHAIN_FORMATION")
		statef=chain_formation
	else if(BVMSTATE=="WAYPOINT")
		statef=indiWP
	else if(BVMSTATE=="IDLE")
		statef=idle
	else if(BVMSTATE=="AGGREGATE")
		statef=aggregate
	else if(BVMSTATE=="POTENTIAL")
		statef=lennardjones
	else if(BVMSTATE=="PURSUIT")
		statef=pursuit
	else if(BVMSTATE=="TASK_ALLOCATE")	# or bidding ?
		statef=graph_state
	else if(BVMSTATE=="BIDDING")	# check the absolute path of the waypointlist csv file in bidding.bzz
		statef=bidding
	else if(BVMSTATE=="DEPLOY")	# check the absolute path of the waypointlist csv file in bidding.bzz
		statef=voronoicentroid
	else if(BVMSTATE=="PATHPLAN")	# ends on navigate, defined in rrtstar
		statef=rrtstar
	else if(BVMSTATE=="NAVIGATE")	# ends on idle, defined in rrtstar
		statef=navigate
	else if(BVMSTATE=="TEST_COLLISION_AVOIDANCE")
		statef=test_collision_avoidance
	else if(BVMSTATE == "FOLLOW")	#TODO: not tested in new structure
		statef=follow
	else if(BVMSTATE == "PICTURE")	#TODO: not tested in new structure
		statef=take_picture

	statef()
}
 
# Executed once when the robot (or the simulator) is reset.
function reset() {
}
 
# Executed once at the end of experiment.
function destroy() {
	close_bidding()
	discomp_destroy()
}
